// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPermissionServiceClient is the client API for UserPermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPermissionServiceClient interface {
	Validate(ctx context.Context, in *GetUserPermissionRequest, opts ...grpc.CallOption) (*GetUserPermissionResponse, error)
}

type userPermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPermissionServiceClient(cc grpc.ClientConnInterface) UserPermissionServiceClient {
	return &userPermissionServiceClient{cc}
}

func (c *userPermissionServiceClient) Validate(ctx context.Context, in *GetUserPermissionRequest, opts ...grpc.CallOption) (*GetUserPermissionResponse, error) {
	out := new(GetUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/proto.UserPermissionService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPermissionServiceServer is the server API for UserPermissionService service.
// All implementations must embed UnimplementedUserPermissionServiceServer
// for forward compatibility
type UserPermissionServiceServer interface {
	Validate(context.Context, *GetUserPermissionRequest) (*GetUserPermissionResponse, error)
	mustEmbedUnimplementedUserPermissionServiceServer()
}

// UnimplementedUserPermissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPermissionServiceServer struct {
}

func (UnimplementedUserPermissionServiceServer) Validate(context.Context, *GetUserPermissionRequest) (*GetUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedUserPermissionServiceServer) mustEmbedUnimplementedUserPermissionServiceServer() {}

// UnsafeUserPermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPermissionServiceServer will
// result in compilation errors.
type UnsafeUserPermissionServiceServer interface {
	mustEmbedUnimplementedUserPermissionServiceServer()
}

func RegisterUserPermissionServiceServer(s grpc.ServiceRegistrar, srv UserPermissionServiceServer) {
	s.RegisterService(&UserPermissionService_ServiceDesc, srv)
}

func _UserPermissionService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserPermissionService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionServiceServer).Validate(ctx, req.(*GetUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPermissionService_ServiceDesc is the grpc.ServiceDesc for UserPermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserPermissionService",
	HandlerType: (*UserPermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _UserPermissionService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assets/proto/user-permission-service.proto",
}
